<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.dao.BoardMapper">
	
	
	<!-- Board DTO에 대한 resultMap -->
	<resultMap type="Board" id="board_rm">
	
		<id property="boardNo" column="BOARD_NO"/>
		
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="boardCreateDate" column="B_CREATE_DATE"/>
		<result property="boardUpdateDate" column="B_UPDATE_DATE"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="commentCount" column="COMMENT_COUNT"/>
		<result property="likeCount" column="LIKE_COUNT"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="profileImage" column="PROFILE_IMG"/>
		
		<result property="thumbnail" column="THUMBNAIL"/>
		
		<collection property="imageList"
					select = "selectImageList"
					column = "BOARD_NO"
					javaType = "java.util.ArrayList"
					ofType = "BoardImage"
		/>
		
		<collection property="commentList"
					select = "selectCommentList"
					column = "BOARD_NO"
					javaType = "java.util.ArrayList"
					ofType = "Comment"
		/>
	</resultMap>
	
	
	<!-- BoardImage resultMap -->
	<resultMap type="BoardImage" id="boardImage_rm">
		<id property="imageNo" column="IMG_NO"/>
		
		<result property="imagePath" column="IMG_PATH"/>
		<result property="imageReName" column="IMG_RENAME"/>
		<result property="imageOriginal" column="IMG_ORIGINAL"/>
		<result property="imageOrder" column="IMG_ORDER"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>
	
	
	<!-- Comment resultMap -->
	<resultMap type="Comment" id="comment_rm">
		<id property="commentNo" column="COMMENT_NO"/>
		<result property="commentContent" column="COMMENT_CONTENT"/>
		<result property="commentCreateDate" column="C_CREATE_DATE"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="memberNo" column="MEMBER_NO"/>
		<result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
		<result property="parentNo" column="PARENT_NO"/>
		<result property="memberNickname" column="MEMBER_NICKNAME"/>
		<result property="profileImage" column="PROFILE_IMG"/>
	</resultMap>
	
	
	
	 <!-- 게시판 종류 목록 조회 -->
	<select id="selectBoardTypeList" resultType="map">
		SELECT * FROM "BOARD_TYPE" ORDER BY 1
	</select>



	<!-- 특정 게시판의 삭제되지 않은 게시글 수 조회 -->
  	<select id="getListCount" resultType="_int">
  		SELECT COUNT(*) FROM BOARD
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
  	</select>
  	
  	
  	<!-- 특정 게시판의 삭제되지 않고 검색조건이 일치하는 게시글 수 조회 -->
  	<select id="getSearchListCount" resultType="_int">
  		SELECT COUNT(*) FROM BOARD
  		
  		<if test='key == "w"'>
  			JOIN "MEMBER" USING(MEMBER_NO)
  		</if>
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		
		<choose>
			<when test='key == "t"'>
				<!-- 제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			
			<when  test='key == "c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
			<when  test='key == "tc"'>
				<!-- 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			
			<when  test='key == "w"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
		</choose>
  	</select>
  	
  	<!-- CDATA 태그 : 해당 태그 내부에 작성된 것은 모두 문자로 취급 -->
  	<!-- 게시글 목록 조회 SQL -->
  	<select id="selectBoardList" resultMap="board_rm">
  	<![CDATA[
  	SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
	CASE
		WHEN SYSDATE - B_CREATE_DATE < 1/24/60
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
		WHEN SYSDATE - B_CREATE_DATE < 1/24
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
		WHEN SYSDATE - B_CREATE_DATE < 1
		THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
		ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
	 ]]>
	END B_CREATE_DATE,
	(SELECT COUNT(*) FROM "COMMENT" C
	 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
	(SELECT COUNT(*) FROM BOARD_LIKE L
	 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
	(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
	WHERE I.BOARD_NO = B.BOARD_NO
	AND IMG_ORDER = 0) THUMBNAIL
	FROM "BOARD" B
	JOIN "MEMBER" USING(MEMBER_NO)
	WHERE BOARD_DEL_FL = 'N'
	AND BOARD_CODE = #{boardCode}
	ORDER BY BOARD_NO DESC
  	</select>
  	
  	
  	<select id="selectSearchBoardList" resultMap="board_rm">
  	<![CDATA[
	  	SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME, READ_COUNT,
			CASE
			WHEN SYSDATE - B_CREATE_DATE < 1/24/60
			THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60 * 60 ) || '초 전'
			WHEN SYSDATE - B_CREATE_DATE < 1/24
			THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24 * 60) || '분 전'
			WHEN SYSDATE - B_CREATE_DATE < 1
			THEN FLOOR( (SYSDATE - B_CREATE_DATE) * 24) || '시간 전'
			ELSE TO_CHAR(B_CREATE_DATE, 'YYYY-MM-DD')
	 ]]>
		END B_CREATE_DATE,
		(SELECT COUNT(*) FROM "COMMENT" C
		 WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM BOARD_LIKE L
		 WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		(SELECT IMG_PATH || IMG_RENAME FROM BOARD_IMG I
		WHERE I.BOARD_NO = B.BOARD_NO
		AND IMG_ORDER = 0) THUMBNAIL
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		<choose>
			<when test='key == "t"'>
				<!-- 제목 -->
				AND BOARD_TITLE LIKE '%${query}%'
			</when>
			
			<when  test='key == "c"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
			
			<when  test='key == "tc"'>
				<!-- 내용 -->
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			
			<when  test='key == "w"'>
				<!-- 내용 -->
				AND BOARD_CONTENT LIKE '%${query}%'
			</when>
		</choose>
	
		ORDER BY BOARD_NO DESC
  	</select>
  	
  	
  	
  	
  	

  	<select id="selectBoard" resultMap="board_rm">
  	
  	SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_CODE,
		READ_COUNT, MEMBER_NICKNAME, MEMBER_NO, PROFILE_IMG,
		TO_CHAR(B_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_CREATE_DATE,
		TO_CHAR(B_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') B_UPDATE_DATE,
		(SELECT COUNT(*)
	FROM "BOARD_LIKE" L
	WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		AND BOARD_NO = #{boardNo}
  	
  	</select>
  	
  	<!-- 이미지 가져오기 -->
  	<select id="selectImageList" resultMap = "boardImage_rm">
  		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_ORDER
  	</select>
  
  	
  	<!-- 댓글조회-->
  	<select id="selectCommentList" resultMap = "comment_rm">
  	SELECT C.* 
  	FROM  
		(SELECT COMMENT_NO, COMMENT_CONTENT,
		TO_CHAR(C_CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') C_CREATE_DATE,
		BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, COMMENT_DEL_FL
		FROM "COMMENT"
		JOIN MEMBER USING(MEMBER_NO)
		WHERE BOARD_NO = #{boardNo}) C
	WHERE COMMENT_DEL_FL = 'N'
	START WITH PARENT_NO IS NULL
	CONNECT BY PRIOR COMMENT_NO = PARENT_NO 
	ORDER SIBLINGS BY COMMENT_NO  
  	</select>
   
  
  	<!-- 좋아요 눌렀는지 확인 -->
  	<select id="likeCheck" resultType="_int">
  	
  		SELECT COUNT(*) FROM BOARD_LIKE 
		WHERE MEMBER_NO = #{memberNo} AND 
		BOARD_NO = #{boardNo}
  	
  	</select>
  
  	
  	<!-- 조회수 증가  -->
  	<update id="updateReadCount">
  		UPDATE "BOARD" SET
  		READ_COUNT = READ_COUNT + 1
  		WHERE BOARD_NO = #{boardNo}
  	
  	</update>
  
  
  	
  	<!--  좋아요 추가 -->
  	<insert id="likeInsert">
  		INSERT INTO BOARD_LIKE
  		VALUES(#{boardNo}, #{memberNo})
  	</insert>
  
  
  	<!--  좋아요 삭제 -->
  	<delete id="likeDelete">
		DELETE FROM BOARD_LIKE 
		WHERE BOARD_NO  = #{boardNo}     AND 
		MEMBER_NO =  #{memberNo}	
  	</delete>
  
  	
  	<select id="countBoardLike" resultType = "_int">
  		SELECT COUNT(*) FROM "BOARD_LIKE"
  		WHERE BOARD_NO = #{boardNo}
 
  	</select>
  	
  	
  	<!--  게시글 삽입 -->
  	<!-- 
  		동적 SQL
  		- 프로그램 수행 중 SQL을 변경하는 기능
  		<selectKey> : INSERT/UPDATE 시 사용할 키(시퀀스)를 조회해서
  		파라미터의 지정된 필드에 대입
  		
  		useGeneratedKeys : DB 내부적으로 생성한 키(시퀀스) 를 
  		전달된 파라미터의 필드로 대입 가능하게 함
  		
  		order="BOFORE" : 메인 SQL 이 수행되기 전에 selectKey가 수행되도록 지정
		
		keyProperty : select의 조회 결과를 저장할 파라미터의 필드  	
  	 -->
  	
  	
  	<!-- 
  		동적 SQL 증 <foreach>
  		- 특정 sql 구문을 반복할 때 사용
  		- 반복되는 사이에 구분자를 추가할 수 있음
  	
  		
  	 -->

  
  
  <select id="selectImageListAll" resultType="string">
  	SELECT IMG_RENAME
  	FROM BOARD_IMG
  
  </select>















</mapper>
